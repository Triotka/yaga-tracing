#ifndef YAGA_SOLVER_WRAPPER_H
#define YAGA_SOLVER_WRAPPER_H

#include <optional>
#include <vector>
#include <ranges>

#include "Solver_answer.h"
#include "Term_manager.h"
#include "Term_types.h"
#include "Term_visitor.h"
#include "Variable.h"
#include "Yaga.h"

namespace yaga::parser
{

/** Abstract visitor for variable values.
 * 
 * The default implementation does nothing with the values.
 */
class Default_model_visitor {
public:
    virtual ~Default_model_visitor() {}

    /** Visit value of a rational variable
     * 
     * @param term term representing a rational variable
     * @param value value of @p term
     */
    virtual void visit(terms::term_t, Rational const&) {}

    /** Visit value of a boolean variable
     * 
     * @param term term representing a boolean variable
     * @param value value of @p term
     */
    virtual void visit(terms::term_t, bool) {}
};

class Solver_wrapper
{
    terms::Term_manager& term_manager;
    Yaga solver;
    std::unordered_map<terms::term_t, Variable> variables;
public:
    explicit Solver_wrapper(terms::Term_manager& term_manager);

    Solver_answer check(std::vector<terms::term_t> const& assertions);

    /** Get model generated by the last `check()` call.
     * 
     * @param visitor visitor called for each user-defined variable
     */
    void model(Default_model_visitor& visitor);
};

}

#endif // YAGA_SOLVER_WRAPPER_H
